@Test
void testPostToMemberSecOpsService_failure() {

    ResponseEvent responseEvent = ResponseEvent.builder()
        .aricEventId("failure-id")
        .aricResponseTimestamp("2025-02-27T09:06:38.252195Z")
        .build();

    mockWebClient();


    when(responseSpec.onStatus(any(), any()))
        .thenAnswer(invocation -> {
            Function<ClientResponse, Mono<? extends Throwable>> errorFunction = invocation.getArgument(1);
            ClientResponse mockClientResponse = mock(ClientResponse.class);
            when(mockClientResponse.bodyToMono(String.class)).thenReturn(Mono.just("Simulated error body"));
            return responseSpec;
        });

    when(responseSpec.bodyToMono(MemberSecOpsResponse.class))
        .thenReturn(Mono.error(new RuntimeException("Simulated WebClient failure")));


    RuntimeException thrown = assertThrows(RuntimeException.class, () -> {
        memberSecOpsService.postToMemberSecOpsService(responseEvent);
    });

    assertTrue(thrown.getMessage().contains("Simulated WebClient failure"));
}
