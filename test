package com.praveen;

import com.praveen.model.OmnisysPendingConfirmation;

import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.Arrays;

public class OmnisysPendingConfirmationWriter {

    private static final int RECORD_LENGTH = 150;

    public static void main(String[] args) {
        OmnisysPendingConfirmation data = OmnisysPendingConfirmation.builder()
                .storeNumber("12345")
                .rxNumber("123456789")
                .refillNumber("5")
                .dateOfService("20250616")
                .pharmacyNpi("1234567890")
                .transactionType("A")
                .soldDate("20250615")
                .ndcNumber("12345678901")
                .authReferenceNumber("Authorization123456")
                .cardholderId("CardHolder123456")
                .patientFirstName("John")
                .patientLastName("Doe")
                .patientMiddleInitial("M")
                .respTotalAmtPaid("12345")
                .patientPayAmt("678")
                .epmsSequenceNumber("99999")
                .rfPartialFillCode("1")
                .activityDate("20250615")
                .build();

        try (FileOutputStream fos = new FileOutputStream("omnisys_pending_confirmation.dat")) {
            fos.write(createRecord(data));
            System.out.println("File written: omnisys_pending_confirmation.dat");
        } catch (IOException e) {
            System.err.println("File write error: " + e.getMessage());
        }
    }

    static byte[] createRecord(OmnisysPendingConfirmation d) {
        byte[] record = new byte[RECORD_LENGTH];
        int pos = 0;

        pos = writeComp3(record, pos, d.getStoreNumber(), 5);             // S9(5)
        pos = writeComp3(record, pos, d.getRxNumber(), 9);                // S9(9)
        pos = writeComp3(record, pos, d.getRefillNumber(), 1);           // 9
        pos = writeComp3(record, pos, d.getDateOfService(), 8);          // 9(8)
        pos = writeText(record, pos, d.getPharmacyNpi(), 10);            // X(10)
        pos = writeChar(record, pos, d.getTransactionType());            // X
        pos = writeComp3(record, pos, d.getSoldDate(), 8);               // 9(8)
        pos = writeComp3(record, pos, d.getNdcNumber(), 11);             // 9(11)
        pos = writeText(record, pos, d.getAuthReferenceNumber(), 20);    // X(20)
        pos = writeText(record, pos, d.getCardholderId(), 15);           // X(15)
        pos = writeText(record, pos, d.getPatientFirstName(), 12);       // X(12)
        pos = writeText(record, pos, d.getPatientLastName(), 15);        // X(15)
        pos = writeChar(record, pos, d.getPatientMiddleInitial());       // X
        pos = writeComp3(record, pos, d.getRespTotalAmtPaid(), 7);       // S9(7)V99 => 9 digits total
        pos = writeComp3(record, pos, d.getPatientPayAmt(), 7);          // S9(7)V99 => 9 digits total
        pos = writeComp3(record, pos, d.getEpmsSequenceNumber(), 5);     // X(5) as comp-3, assumed numeric
        pos = writeChar(record, pos, d.getRfPartialFillCode());          // S9(7) V99 â€” partial fill coded as char
        pos = writeComp3(record, pos, d.getActivityDate(), 8);           // 9(8)
        writeText(record, pos, "", 25);                                  // FILLER X(25)

        return record;
    }

    static int writeComp3(byte[] target, int pos, String value, int digits) {
        byte[] packed = packComp3(value, digits);
        System.arraycopy(packed, 0, target, pos, packed.length);
        return pos + packed.length;
    }

    static int writeText(byte[] target, int pos, String value, int length) {
        byte[] padded = padRight(value, length);
        System.arraycopy(padded, 0, target, pos, padded.length);
        return pos + padded.length;
    }

    static int writeChar(byte[] target, int pos, String value) {
        byte b = value != null && !value.isEmpty() ? (byte) value.charAt(0) : (byte) ' ';
        target[pos] = b;
        return pos + 1;
    }

    static byte[] packComp3(String numberStr, int digits) {
        String paddedNumber = String.format("%0" + digits + "d", Long.parseLong(numberStr));
        paddedNumber += "C"; // Positive sign 'C'; for negative use 'D'

        int len = (paddedNumber.length() + 1) / 2;
        byte[] packed = new byte[len];

        for (int i = 0; i < paddedNumber.length(); i += 2) {
            int hi = Character.digit(paddedNumber.charAt(i), 16);
            int lo = (i + 1 < paddedNumber.length())
                    ? Character.digit(paddedNumber.charAt(i + 1), 16)
                    : 0;
            packed[i / 2] = (byte) ((hi << 4) | lo);
        }

        return packed;
    }

    static byte[] padRight(String input, int length) {
        byte[] bytes = new byte[length];
        Arrays.fill(bytes, (byte) ' ');
        if (input != null) {
            byte[] strBytes = input.getBytes(StandardCharsets.US_ASCII);
            System.arraycopy(strBytes, 0, bytes, 0, Math.min(length, strBytes.length));
        }
        return bytes;
    }
}
