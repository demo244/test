package com.praveen.business.filter;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.praveen.business.model.InputRequest;
import jakarta.servlet.*;
import jakarta.servlet.http.HttpServletRequest;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;
import org.springframework.web.util.ContentCachingRequestWrapper;

import java.io.IOException;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.util.Optional;

@Component
@Slf4j
public class RequestLoggingFilter implements Filter {

    private static final ObjectMapper objectMapper = new ObjectMapper();

    @Override
    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)
            throws IOException, ServletException {

        if (!(request instanceof HttpServletRequest)) {
            chain.doFilter(request, response);
            return;
        }

        ContentCachingRequestWrapper wrappedRequest = new ContentCachingRequestWrapper((HttpServletRequest) request);
        chain.doFilter(wrappedRequest, response);

        String contentType = wrappedRequest.getContentType();
        if (contentType != null && contentType.contains("application/json")) {
            byte[] buf = wrappedRequest.getContentAsByteArray();

            if (buf.length > 0) {
                Charset charset = Optional.of(wrappedRequest.getCharacterEncoding())
                        .map(Charset::forName)
                        .orElse(StandardCharsets.UTF_8);
                String body = new String(buf, charset);
                try {
                    log.info("Raw Request Body: {}", body);
                    InputRequest inputRequest = objectMapper.readValue(body, InputRequest.class);
                    log.info("Deserialized InputRequest: {}", inputRequest);
                } catch (Exception e) {
                    log.warn("Failed to read request body", e);
                }
            }
        }
    }
}
